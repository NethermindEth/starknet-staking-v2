// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go
//
// Generated by this command:
//
//	mockgen -source=validator.go -destination=./mocks/mock_account.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	rpc "github.com/NethermindEth/starknet.go/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockAccounter is a mock of Accounter interface.
type MockAccounter struct {
	ctrl     *gomock.Controller
	recorder *MockAccounterMockRecorder
	isgomock struct{}
}

// MockAccounterMockRecorder is the mock recorder for MockAccounter.
type MockAccounterMockRecorder struct {
	mock *MockAccounter
}

// NewMockAccounter creates a new mock instance.
func NewMockAccounter(ctrl *gomock.Controller) *MockAccounter {
	mock := &MockAccounter{ctrl: ctrl}
	mock.recorder = &MockAccounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounter) EXPECT() *MockAccounterMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockAccounter) Address() *felt.Felt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(*felt.Felt)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockAccounterMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockAccounter)(nil).Address))
}

// BlockWithTxHashes mocks base method.
func (m *MockAccounter) BlockWithTxHashes(ctx context.Context, blockID rpc.BlockID) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockWithTxHashes", ctx, blockID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockWithTxHashes indicates an expected call of BlockWithTxHashes.
func (mr *MockAccounterMockRecorder) BlockWithTxHashes(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockWithTxHashes", reflect.TypeOf((*MockAccounter)(nil).BlockWithTxHashes), ctx, blockID)
}

// BuildAndSendInvokeTxn mocks base method.
func (m *MockAccounter) BuildAndSendInvokeTxn(ctx context.Context, functionCalls []rpc.InvokeFunctionCall, multiplier float64) (*rpc.AddInvokeTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndSendInvokeTxn", ctx, functionCalls, multiplier)
	ret0, _ := ret[0].(*rpc.AddInvokeTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAndSendInvokeTxn indicates an expected call of BuildAndSendInvokeTxn.
func (mr *MockAccounterMockRecorder) BuildAndSendInvokeTxn(ctx, functionCalls, multiplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndSendInvokeTxn", reflect.TypeOf((*MockAccounter)(nil).BuildAndSendInvokeTxn), ctx, functionCalls, multiplier)
}

// Call mocks base method.
func (m *MockAccounter) Call(ctx context.Context, call rpc.FunctionCall, blockId rpc.BlockID) ([]*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, call, blockId)
	ret0, _ := ret[0].([]*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockAccounterMockRecorder) Call(ctx, call, blockId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockAccounter)(nil).Call), ctx, call, blockId)
}

// GetTransactionStatus mocks base method.
func (m *MockAccounter) GetTransactionStatus(ctx context.Context, transactionHash *felt.Felt) (*rpc.TxnStatusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionStatus", ctx, transactionHash)
	ret0, _ := ret[0].(*rpc.TxnStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionStatus indicates an expected call of GetTransactionStatus.
func (mr *MockAccounterMockRecorder) GetTransactionStatus(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionStatus", reflect.TypeOf((*MockAccounter)(nil).GetTransactionStatus), ctx, transactionHash)
}
